"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.tryParsingTerraformFile = void 0;
const hclToJson = require("hcl-to-json");
const types_1 = require("../types");
const errors_1 = require("../../../../../lib/errors");
function tryParsingTerraformFile(fileData) {
    try {
        // TODO: This parser does not fail on inavlid Terraform files! it is here temporarily.
        // cloud-config team will replace it to a valid parser for the beta release.
        const parsedData = hclToJson(fileData.fileContent);
        return [
            Object.assign(Object.assign({}, fileData), { jsonContent: parsedData, engineType: types_1.EngineType.Terraform }),
        ];
    }
    catch (err) {
        throw new FailedToParseTerraformFileError(fileData.filePath);
    }
}
exports.tryParsingTerraformFile = tryParsingTerraformFile;
class FailedToParseTerraformFileError extends errors_1.CustomError {
    constructor(filename) {
        super('Failed to parse Terraform file');
        this.code = types_1.IaCErrorCodes.FailedToParseTerraformFileError;
        this.userMessage = `We were unable to parse the Terraform file "${filename}", please ensure it is valid HCL2. This can be done by running it through the 'terraform validate' command.`;
    }
}
//# sourceMappingURL=terraform-file-parser.js.map