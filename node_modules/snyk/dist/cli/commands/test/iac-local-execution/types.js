"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IaCErrorCodes = exports.VALID_RESOURCE_ACTIONS = exports.EngineType = exports.VALID_FILE_TYPES = void 0;
exports.VALID_FILE_TYPES = ['tf', 'json', 'yaml', 'yml'];
var EngineType;
(function (EngineType) {
    EngineType[EngineType["Kubernetes"] = 0] = "Kubernetes";
    EngineType[EngineType["Terraform"] = 1] = "Terraform";
})(EngineType = exports.EngineType || (exports.EngineType = {}));
// we will be scanning the `create` & `update` actions only.
exports.VALID_RESOURCE_ACTIONS = [
    ['create'],
    ['update'],
    ['create', 'delete'],
    ['delete', 'create'],
];
// Error codes used for Analytics & Debugging
// Within a single module, increments are in 1.
// Between modules, increments are in 10, according to the order of execution.
var IaCErrorCodes;
(function (IaCErrorCodes) {
    // local-cache errors
    IaCErrorCodes[IaCErrorCodes["FailedToInitLocalCacheError"] = 1000] = "FailedToInitLocalCacheError";
    IaCErrorCodes[IaCErrorCodes["FailedToCleanLocalCacheError"] = 1001] = "FailedToCleanLocalCacheError";
    // file-loader errors
    IaCErrorCodes[IaCErrorCodes["NoFilesToScanError"] = 1010] = "NoFilesToScanError";
    IaCErrorCodes[IaCErrorCodes["FailedToLoadFileError"] = 1011] = "FailedToLoadFileError";
    // file-parser errors
    IaCErrorCodes[IaCErrorCodes["UnsupportedFileTypeError"] = 1020] = "UnsupportedFileTypeError";
    IaCErrorCodes[IaCErrorCodes["InvalidJsonFileError"] = 1021] = "InvalidJsonFileError";
    IaCErrorCodes[IaCErrorCodes["InvalidYamlFileError"] = 1022] = "InvalidYamlFileError";
    IaCErrorCodes[IaCErrorCodes["FailedToDetectJsonFileError"] = 1023] = "FailedToDetectJsonFileError";
    // kubernetes-parser errors
    IaCErrorCodes[IaCErrorCodes["MissingRequiredFieldsInKubernetesYamlError"] = 1031] = "MissingRequiredFieldsInKubernetesYamlError";
    IaCErrorCodes[IaCErrorCodes["FailedToParseHelmError"] = 1032] = "FailedToParseHelmError";
    // terraform-file-parser errors
    IaCErrorCodes[IaCErrorCodes["FailedToParseTerraformFileError"] = 1040] = "FailedToParseTerraformFileError";
    // terraform-plan-parser errors
    IaCErrorCodes[IaCErrorCodes["FailedToExtractResourcesInTerraformPlanError"] = 1052] = "FailedToExtractResourcesInTerraformPlanError";
    // file-scanner errors
    IaCErrorCodes[IaCErrorCodes["FailedToBuildPolicyEngine"] = 1060] = "FailedToBuildPolicyEngine";
    IaCErrorCodes[IaCErrorCodes["FailedToExecutePolicyEngine"] = 1061] = "FailedToExecutePolicyEngine";
    // results-formatter errors
    IaCErrorCodes[IaCErrorCodes["FailedToFormatResults"] = 1070] = "FailedToFormatResults";
    IaCErrorCodes[IaCErrorCodes["FailedToExtractLineNumberError"] = 1071] = "FailedToExtractLineNumberError";
    // get-iac-org-settings errors
    IaCErrorCodes[IaCErrorCodes["FailedToGetIacOrgSettingsError"] = 1080] = "FailedToGetIacOrgSettingsError";
    // assert-iac-options-flag
    IaCErrorCodes[IaCErrorCodes["FlagError"] = 1090] = "FlagError";
})(IaCErrorCodes = exports.IaCErrorCodes || (exports.IaCErrorCodes = {}));
//# sourceMappingURL=types.js.map