"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.test = void 0;
const assert_iac_options_flag_1 = require("./iac-local-execution/assert-iac-options-flag");
const iac_local_execution_1 = require("./iac-local-execution");
const lib_1 = require("../../../lib");
/**
 * Shim around the new local execution test path and the existing remote
 * test flow. We also locally deal with the way the legacy test flow exposes
 * the scanned files via the `options.iacDirFiles` object here so that
 * in the new flow we do not mutate the options object.
 */
async function test(pathToScan, options) {
    var _a;
    // Ensure that all flags are correct. We do this to ensure that the
    // caller doesn't accidentally mistype --experimental and send their
    // configuration files to our backend by accident.
    assert_iac_options_flag_1.assertIaCOptionsFlags(process.argv);
    if (options.experimental) {
        // this path is an experimental feature feature for IaC which does issue scanning locally without sending files to our Backend servers.
        // once ready for GA, it is aimed to deprecate our remote-processing model, so IaC file scanning in the CLI is done locally.
        return iac_local_execution_1.test(pathToScan, options);
    }
    const results = await lib_1.test(pathToScan, options);
    return {
        failures: (_a = options.iacDirFiles) === null || _a === void 0 ? void 0 : _a.filter((file) => !!file.failureReason),
        results,
    };
}
exports.test = test;
//# sourceMappingURL=iac-test-shim.js.map